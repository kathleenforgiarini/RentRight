@model IEnumerable<RentRight.Models.ManagerAvailability>
@using RentRight.Models.Enums

@{
    ViewData["Title"] = "Availability";
}
<link rel="stylesheet" href="~/css/appointments.css" asp-append-version="true" />

<h3 class="px-0">Manage my availability</h3>

<table class="table mt-3 table-striped table-hover">
    <thead>
        <tr>
            <th>
                Day
            </th>
            <th>
                Time
            </th>
            <th>
            </th>
        </tr>
    </thead>
    <tbody>
    @foreach (var item in Model) {
        <tr>
            <td class="align-content-center">
                @Html.DisplayFor(modelItem => item.DayOfTheWeek)
            </td>
                <td class="align-content-center">
                @String.Format("{0:hh\\:mm}", item.Time)
            <td>
                <a onclick="deleteAvailability(@item.Id)" class="btn btn-outline-danger">Delete</a>
            </td>
        </tr>
    }
    </tbody>
</table>

<div class="row d-flex mt-5">
    <div class="col-md-6">
        <p class="fw-bold">Add new slot</p>
        <form asp-action="Create" method="post" class="d-flex flex-column justify-content-center align-items-center">
            <div class="w-100 d-flex justify-content-between">
                <div class="form-floating mt-3 col-5">
                    <select class="form-control" name="day">
                        @foreach (var day in Enum.GetValues(typeof(DayOfTheWeek)))
                        {
                            <option value="@day">@day</option>
                        }
                    </select>
                    <label class="control-label">Day of the Week</label>
                </div>
                <div class="form-floating mt-3 col-5">
                    <input type="time" name="time" class="form-control" required/>
                    <label class="control-label">Time</label>
                </div>

            </div>
            <div class="form-group mt-5 w-100">
                <input type="submit" value="Save" class="btnSave" />
            </div>
        </form>
    </div>
</div>
@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        let successMessage = "@(ViewBag.SuccessMessage)";
        let errorMessage = "@(ViewBag.ErrorMessage)";
        if (successMessage !== "") {

            new Notify({
                title: successMessage,
                position: 'right top',
                effect: 'slide',
            })

        }

        if (errorMessage !== "") {

            new Notify({
                status: 'error',
                title: errorMessage,
                position: 'right top',
                effect: 'slide',
            })

        }

        function deleteAvailability(id) {

            Swal.fire({
                title: 'Are you sure you want to delete this slot?',
                text: 'You won\'t be able to revert this!',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#6d85bc',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    deleteSlot(id);
                }
            });
            function deleteSlot(id) {
                var token = $('input[name="__RequestVerificationToken"]').val();
                $.ajax({
                    url: '/ManagerAvailabilities/Delete/' + id,
                    type: 'POST',
                    data: {
                        __RequestVerificationToken: token
                    },
                    success: function (response) {
                        Swal.fire({
                            title: 'Deleted!',
                            text: 'This slot has been deleted.',
                            icon: 'success',
                            timer: 3000,
                            onClose: function () {
                                window.location.href = '/ManagerAvailabilities/Index';
                            }
                        });
                    },
                    error: function (xhr, status, error) {
                        Swal.fire({
                            title: 'Error!',
                            text: xhr.responseText,
                            icon: 'error'
                        });
                    }
                });
            }
        }
        

    </script>
}
